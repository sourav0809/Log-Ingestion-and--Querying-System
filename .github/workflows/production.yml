name: LogLyzer Production Build

on:
  push:
    branches: [main, master]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      client-changed: ${{ steps.filter.outputs.client }}
      server-changed: ${{ steps.filter.outputs.server }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            client:
              - 'Client/**'
            server:
              - 'Server/**'

  client-build:
    name: Client Build & Test
    needs: check-changes
    runs-on: [self-hosted, main]
    if: needs.check-changes.outputs.client-changed == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: Client/package-lock.json

      - name: Install Dependencies (Client)
        working-directory: ./Client
        run: npm ci

      - name: Lint Client Code
        working-directory: ./Client
        run: npm run lint

      - name: Build Client
        working-directory: ./Client
        run: npm run build

      - name: Deploy Client to NGINX
        working-directory: ./Client
        run: |
          sudo rm -rf /var/www/client/*
          sudo cp -r dist/* /var/www/client

  server-build:
    name: Server Build & Test
    needs: check-changes
    runs-on: [self-hosted, main]
    if: needs.check-changes.outputs.server-changed == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: Server/package-lock.json

      - name: Install Dependencies (Server)
        working-directory: ./Server
        run: npm ci

      - name: Lint Server Code
        working-directory: ./Server
        run: npm run lint

      - name: Type Check Server
        working-directory: ./Server
        run: npm run ts.check

      - name: Build Server
        working-directory: ./Server
        run: npm run build

      - name: Restart Server using PM2
        working-directory: ./Server
        run: npx pm2 startOrReload pm2/ecosystem.config.json --env production
